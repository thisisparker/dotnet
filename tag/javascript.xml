<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="http://localhost:4000/dotnet/tag/javascript.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/dotnet/" rel="alternate" type="text/html" /><updated>2022-09-18T18:13:34-04:00</updated><id>http://localhost:4000/dotnet/tag/javascript.xml</id><title type="html">parker higgins dot net</title><subtitle></subtitle><author><name>Parker Higgins</name></author><entry><title type="html">Which states hated Wesley?</title><link href="http://localhost:4000/dotnet/2017/09/which-states-hated-wesley/" rel="alternate" type="text/html" title="Which states hated Wesley?" /><published>2017-09-08T15:20:59-04:00</published><updated>2017-09-08T15:20:59-04:00</updated><id>http://localhost:4000/dotnet/2017/09/which-states-hated-wesley</id><content type="html" xml:base="http://localhost:4000/dotnet/2017/09/which-states-hated-wesley/"><![CDATA[<p>One of my goals while at Recurse Center has been to improve my ability to manipulate and visualize data sets. To that end, I’ve been toying around with the <a href="https://www.ssa.gov/oact/babynames/limits.html">Social Security Administration’s baby name dataset</a>, which records the number of babies born with each given name every year, both federally and at the state level. Because I’ve also been watching <em>Star Trek: The Next Generation</em> along with the <a href="http://foreverdogproductions.com/fdpn/podcasts/treks-and-the-city/">Treks And The City podcast</a>, I chose to dig into information about the name “Wesley.”</p>

<p>On my first pass through the data I noticed that the name’s popularity dramatically spiked around 1976, and then tapered off for a few decades after. Honestly, that spike is the most interesting property of the whole graph, and I can’t explain it very well. But a funny secondary effect is that neither <em>TNG</em>‘s premiere nor the release of <em>The Princess Bride</em>—both in 1987—could prop up the name as it declined in popularity. The effect makes it look like it’s tumbling off a cliff, instead of regressing to the mean. This graph, including the label, was generated in Python’s <code class="language-plaintext highlighter-rouge">matplotlib</code>.</p>

<p><img src="https://parkerhiggins.net/wp-content/uploads/2017/09/figure_1-2.png" alt="" /></p>

<p>After looking at the federal data, I decided to dig into the state-level stuff, to give me a (long-anticipated!) opportunity to generate a choropleth map. Again, I cleaned up the data in Python, and then generated a map using a Javascript library called <code class="language-plaintext highlighter-rouge">&lt;a href="https://d3-geomap.github.io/"&gt;d3-geomap&lt;/a&gt;</code>. For a long time I’ve wanted to get more familiar with its parent library, d3, and this has been a nice opportunity to dip my toe into that.</p>

<p><img src="https://parkerhiggins.net/wp-content/uploads/2017/09/wesmap.png" alt="" /></p>]]></content><author><name>Parker Higgins</name></author><category term="Uncategorized" /><category term="data" /><category term="javascript" /><category term="maps" /><category term="names" /><category term="programming" /><category term="python" /><category term="star trek" /><summary type="html"><![CDATA[One of my goals while at Recurse Center has been to improve my ability to manipulate and visualize data sets. To that end, I’ve been toying around with the Social Security Administration’s baby name dataset, which records the number of babies born with each given name every year, both federally and at the state level. Because I’ve also been watching Star Trek: The Next Generation along with the Treks And The City podcast, I chose to dig into information about the name “Wesley.”]]></summary></entry><entry><title type="html">Limiting Javascript to secure origins in Firefox</title><link href="http://localhost:4000/dotnet/2015/09/limiting-javascript-to-secure-origins-in-firefox/" rel="alternate" type="text/html" title="Limiting Javascript to secure origins in Firefox" /><published>2015-09-28T23:08:39-04:00</published><updated>2015-09-28T23:08:39-04:00</updated><id>http://localhost:4000/dotnet/2015/09/limiting-javascript-to-secure-origins-in-firefox</id><content type="html" xml:base="http://localhost:4000/dotnet/2015/09/limiting-javascript-to-secure-origins-in-firefox/"><![CDATA[<p>I’m a Firefox user, but I was very interested to read Chris Palmer’s <a href="https://noncombatant.org/2014/03/11/privacy-and-security-settings-in-chrome/">guide to privacy and security settings in Chrome</a>. One thing he did that really intrigued me was enabling Javascript only on secure sites. It ends up being a pretty good default not just because it prevents attacks that rely on Javascript injection—like the ads that <a href="http://arstechnica.com/tech-policy/2014/09/why-comcasts-javascript-ad-injections-threaten-security-net-neutrality/">Comcast</a> and <a href="http://webpolicy.org/2015/08/25/att-hotspots-now-with-advertising-injection/">AT&amp;T</a> have inserted into pages accessed on their hotspots, or the <a href="https://www.eff.org/deeplinks/2015/04/china-uses-unencrypted-websites-to-hijack-browsers-in-github-attack">massive man-on-the-side attack</a> the government of China apparently conducted against Github—but also because a site going through the effort to authenticate itself is also a reasonable proxy for the kind of stuff I’d allow anyway.</p>

<p>As far as I can tell, on Firefox that means installing <a href="https://noscript.net/">NoScript, a powerful extension</a> that I’d previously disabled because manually turning on Javascript where I needed it was too much of a hassle. After a few hours of browsing with these settings, it seems to strike the right balance: not exactly <em>no</em> fiddling with permissions, but greatly reduced manual intervention with a lot of unnecessary scripts getting blocked.</p>

<p>The option is in NoScript’s preferences, under <code class="language-plaintext highlighter-rouge">Options &gt; Advanced &gt; HTTPS &gt; Permissions</code>. As long as the global block is on (which it is by default), I found that setting the drop-down menu, “Forbid active web content unless it comes from a secure HTTPS connection” actually works best when set to “Never”—or if you’re a frequent Tor user, to “When using a proxy”. ((This setting is pretty counter-intuitive to me, but if it is set to “Always” I experienced some funny interactions with manual permission changes.)) Then the checkbox below, “Allow HTTPS scripts globally on HTTPS documents”, should be checked.</p>

<p><img src="https://parkerhiggins.net/wp-content/uploads/2015/09/Screenshot_2015-09-28_20-00-40.png" alt="Screenshot_2015-09-28_20-00-40" /></p>

<p>Of course, this isn’t a perfect guarantee of privacy or security. If you don’t trust the Javascript being served from the authenticated site—because the site operators may be malicious or just incompetent—then this technique won’t help. But it does make browsing much faster across much of the web, and preserve the rich interactivity you’re used to on pages your browser trusts.</p>]]></content><author><name>Parker Higgins</name></author><category term="Uncategorized" /><category term="firefox" /><category term="javascript" /><category term="security" /><summary type="html"><![CDATA[I’m a Firefox user, but I was very interested to read Chris Palmer’s guide to privacy and security settings in Chrome. One thing he did that really intrigued me was enabling Javascript only on secure sites. It ends up being a pretty good default not just because it prevents attacks that rely on Javascript injection—like the ads that Comcast and AT&amp;T have inserted into pages accessed on their hotspots, or the massive man-on-the-side attack the government of China apparently conducted against Github—but also because a site going through the effort to authenticate itself is also a reasonable proxy for the kind of stuff I’d allow anyway.]]></summary></entry><entry><title type="html">New plugin: WP Emphasis</title><link href="http://localhost:4000/dotnet/2012/11/new-plugin-wp-emphasis/" rel="alternate" type="text/html" title="New plugin: WP Emphasis" /><published>2012-11-25T03:39:50-05:00</published><updated>2012-11-25T03:39:50-05:00</updated><id>http://localhost:4000/dotnet/2012/11/new-plugin-wp-emphasis</id><content type="html" xml:base="http://localhost:4000/dotnet/2012/11/new-plugin-wp-emphasis/"><![CDATA[<p>Advanced users of the New York Times may know about the “two-shift click” trick on that website: hit the shift button twice on any article page, and you then have the option to link to specific paragraphs or even highlight arbitrary sentences throughout the article, in a way that’s stored in the URL so you can send it around. It’s a shame it’s not more widely known — it’s pretty amazing.</p>

<p>Anyway, it works through <a href="http://open.blogs.nytimes.com/2011/01/11/emphasis-update-and-source/">a little Javascript plug-in called Emphasis</a>, developed in-house at the Times and <a href="https://github.com/NYTimes/Emphasis">released open-source</a> ((with no obvious license, alas)). I poked around a little bit and found that a developer named Ben Balter has released <a href="https://wordpress.org/extend/plugins/wp-emphasis/">a WordPress plugin to implement Emphasis on blogs</a>, and so I decided to give it a spin. Now you can link to any paragraph and highlight any sentence in any post: just hit shift twice and click the pilcrow or the sentence and the URL bar will update.</p>

<p>Every site in the world should provide at least anchor links to different paragraphs, and Emphasis seems like a pretty good method for doing it. For now I just hope it’s helpful, but in the future I’d love to see more people using it.</p>]]></content><author><name>Parker Higgins</name></author><category term="Uncategorized" /><category term="javascript" /><category term="meta" /><category term="new york times" /><summary type="html"><![CDATA[Advanced users of the New York Times may know about the “two-shift click” trick on that website: hit the shift button twice on any article page, and you then have the option to link to specific paragraphs or even highlight arbitrary sentences throughout the article, in a way that’s stored in the URL so you can send it around. It’s a shame it’s not more widely known — it’s pretty amazing.]]></summary></entry></feed>