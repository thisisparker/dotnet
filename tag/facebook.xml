<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="https://thisisparker.github.io/dotnet/tag/facebook.xml" rel="self" type="application/atom+xml" /><link href="https://thisisparker.github.io/dotnet/" rel="alternate" type="text/html" /><updated>2022-09-18T17:29:15-04:00</updated><id>https://thisisparker.github.io/dotnet/tag/facebook.xml</id><title type="html">parker higgins dot net</title><subtitle></subtitle><author><name>Parker Higgins</name></author><entry><title type="html">Problems around me</title><link href="https://thisisparker.github.io/dotnet/2012/03/problems-around-me/" rel="alternate" type="text/html" title="Problems around me" /><published>2012-03-31T22:55:56-04:00</published><updated>2012-03-31T22:55:56-04:00</updated><id>https://thisisparker.github.io/dotnet/2012/03/problems-around-me</id><content type="html" xml:base="https://thisisparker.github.io/dotnet/2012/03/problems-around-me/"><![CDATA[<p>There’s no denying the creepy factor in “<a href="http://girlsaround.me/">Girls Around Me</a>“, the iPhone app that until yesterday <a href="http://www.cultofmac.com/157641/this-creepy-app-isnt-just-stalking-women-without-their-knowledge-its-a-wake-up-call-about-facebook-privacy/">displayed the public Facebook data of women checking in nearby on Foursquare</a>. The creepiness was obvious enough that <a href="http://bits.blogs.nytimes.com/2012/03/30/girls-around-me-ios-app-takes-creepy-to-a-new-level/">Foursquare pulled the app’s API access</a>, rendering the service mostly useless. But in doing so, they’ve addressed a symptom, and not the underlying disease.</p>

<p>A year and a half ago, Eric Butler released a widely-discussed Firefox extension called “<a href="http://codebutler.com/firesheep">Firesheep</a>“, which exploited a known weakness in many popular websites. The effect was that users could get one-click access to the accounts of other users making unencrypted connections to popular sites like Facebook or Twitter on public networks.</p>

<p>Firesheep worked so spectacularly because <a href="https://www.eff.org/deeplinks/2010/10/message-firesheep-baaaad-websites-implement">the problem it exploited was well-known among experts</a> but poorly understood among the general public. That is to say, the problem was low-hanging fruit: even though the technology needed to hijack user sessions using cookies transmitted in the clear was universally available to the geeks with the expertise to use it, even popular sites had felt little pressure from their userbase to address the underlying problem. All Firesheep had to do was put a more usable interface on the well-understood tools, and it could catch the attention of people who weren’t previously interested in understanding the issue.</p>

<p>The problem that Girls Around Me has identified has the same combination of near-universal recognition in expert circles and general confusion outside of them. Most users cannot understand the privacy settings on most social networks. Worse, social network operators have a commercial incentive to make their settings deliberately confusing, and <a href="http://www.antipope.org/charlie/blog-static/2012/03/not-an-april-fool-1.html">even to induce user “over-sharing”</a>.</p>

<p>So, then, <a href="https://twitter.com/#!/thisisparker/status/186235412061233152">Girls Around Me is to privacy settings what Firesheep was to security practices</a>: a tool, usable by the general public, that makes an underlying problem understandable. ((Other entries in this field include <a href="http://pleaserobme.com/">Please Rob Me</a>, <a href="http://www.youhavedownloaded.com/">You Have Downloaded</a>, and even EFF’s <a href="https://panopticlick.eff.org/">Panopticlick</a>.))</p>

<p>But once you understand the two problems, the difference between them is clear. The solution to the Firesheep problem — that sites were not using, or not using by default, encrypted connections after initial log-ins — is simple: use established encryption by default. ((In the interim, too, savvy users could install <a href="https://www.eff.org/https-everywhere">HTTPS Everywhere</a> and protect their own connections with websites that supported encryption.)) Put another way, addressing the issue just required a bit of attention, expertise, and resources.</p>

<p>By contrast, the Girls Around Me problem is part of a fundamental trade-off in the way centralized corporate social networks work today. And the cost of addressing it is correspondingly high. It comes down to users controlling how their data is collected and used, a premise antithetical to the business of advertising companies like Facebook and Google.</p>

<p>But until it happens, and until default settings are protective of user privacy, nothing can prevent creepy situations like Girls Around Me from popping up. As long as these situations look like Girls Around Me — a publicly available application that depends on consistent API access, creeps everybody out, and gets written up in major publications — Facebook, Foursquare, et al, can address it with after-the-fact API cut-offs. But nothing prevents, say, individuals with the know-how from rolling their own stalker apps and flying under the radar.</p>

<p>If you ask me, that’s the creepy part.</p>]]></content><author><name>Parker Higgins</name></author><category term="Uncategorized" /><category term="apis" /><category term="facebook" /><category term="firesheep" /><category term="foursquare" /><category term="girls around me" /><category term="privacy" /><summary type="html"><![CDATA[There’s no denying the creepy factor in “Girls Around Me“, the iPhone app that until yesterday displayed the public Facebook data of women checking in nearby on Foursquare. The creepiness was obvious enough that Foursquare pulled the app’s API access, rendering the service mostly useless. But in doing so, they’ve addressed a symptom, and not the underlying disease.]]></summary></entry><entry><title type="html">Clickwrap privacy isn’t the answer</title><link href="https://thisisparker.github.io/dotnet/2012/02/clickwrap-privacy-isnt-the-answer/" rel="alternate" type="text/html" title="Clickwrap privacy isn’t the answer" /><published>2012-02-27T03:37:16-05:00</published><updated>2012-02-27T03:37:16-05:00</updated><id>https://thisisparker.github.io/dotnet/2012/02/clickwrap-privacy-isnt-the-answer</id><content type="html" xml:base="https://thisisparker.github.io/dotnet/2012/02/clickwrap-privacy-isnt-the-answer/"><![CDATA[<p>Two sets of mobile app privacy stories have broken into the mainstream press this month. The first half of the month was dominated by “addressbook-gate”, where Path (and then, it turns out, <a href="http://venturebeat.com/2012/02/14/iphone-address-book/">many other iOS applications</a>) were found to be <a href="http://mclov.in/2012/02/08/path-uploads-your-entire-address-book-to-their-servers.html">uploading and storing users’ phone contact lists to their servers</a>.</p>

<p>In the firestorm that followed, many people — including <a href="http://venturebeat.com/2012/02/15/congress-apple-address-book/">some US Representatives</a> — called on Apple raise the walls of their garden and address the issue by limiting app access to the address book and notifying users when the application requests access. Apple agreed, and will be <a href="http://allthingsd.com/20120215/apple-app-access-to-contact-data-will-require-explicit-user-permission/">introducing those changes in a future version of iOS</a>.</p>

<p>So case closed. Until this last weekend, when the (London) Sunday Times reported that many popular mobile apps, including Facebook for Android, were “reading” user text messages. (Incidentally, the Sunday Times article is behind a paywall, and I haven’t seen a copy of the original article.) Extrapolating from <a href="http://www.dailymail.co.uk/news/article-2106627/Internet-firms-access-texts-emails-pictures-spying-smartphone-apps.html">other articles covering the Times “scoop”</a>, it looks like the story is likely about the permissions apps typically request during the installation process.</p>

<p>Apps that overreach in their requested permissions are a bad thing, but they’re <a href="http://online.wsj.com/article/SB10001424052748704368004576027751867039730.html">not new</a>, and they’re not a smoking gun: developers may have legitimate and non-obvious reasons for requesting certain permissions, and they may require them for reasons that aren’t immediately clear to the end user. Facebook, for its part, <a href="http://www.zdnet.com/blog/btl/facebook-flickr-others-accused-of-reading-text-messages/70237">denied</a> “reading of user text messages” and explained that the app requires SMS read/write to test an as-yet-unreleased feature.</p>

<p>These two stories follow different arcs, but the second one certainly seems to complicate the first. The clickwrap privacy policy that Apple agreed to require is exactly the sort of permission screen that has been ignored so consistently that a major newspaper decided to publish it as a scoop.</p>

<p>Raising the garden walls is too easy an answer to a hard question. The response to these two privacy stories makes clear that people want their privacy to be respected, which requires effort and resources on the part of the developer. How do we convince developers that those expenses are worth the cost <em>before</em> a PR fiasco about their privacy practices? I don’t know what the solution is, but it’s not expanding clickwrap privacy policies.</p>]]></content><author><name>Parker Higgins</name></author><category term="Uncategorized" /><category term="android" /><category term="facebook" /><category term="ios" /><category term="mobile" /><category term="privacy" /><summary type="html"><![CDATA[Two sets of mobile app privacy stories have broken into the mainstream press this month. The first half of the month was dominated by “addressbook-gate”, where Path (and then, it turns out, many other iOS applications) were found to be uploading and storing users’ phone contact lists to their servers.]]></summary></entry></feed>