<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="https://thisisparker.github.io/dotnet/tag/encryption.xml" rel="self" type="application/atom+xml" /><link href="https://thisisparker.github.io/dotnet/" rel="alternate" type="text/html" /><updated>2022-09-18T17:42:42-04:00</updated><id>https://thisisparker.github.io/dotnet/tag/encryption.xml</id><title type="html">parker higgins dot net</title><subtitle></subtitle><author><name>Parker Higgins</name></author><entry><title type="html">An email signature to encourage encryption use</title><link href="https://thisisparker.github.io/dotnet/2014/08/email-signature-nudge-encryption-use/" rel="alternate" type="text/html" title="An email signature to encourage encryption use" /><published>2014-08-10T20:38:38-04:00</published><updated>2014-08-10T20:38:38-04:00</updated><id>https://thisisparker.github.io/dotnet/2014/08/email-signature-nudge-encryption-use</id><content type="html" xml:base="https://thisisparker.github.io/dotnet/2014/08/email-signature-nudge-encryption-use/"><![CDATA[<p><img src="http://imgs.xkcd.com/comics/pgp.png" alt="" />A great way to encourage more ubiquitous email encryption is to let people you’re emailing know that you’re equipped to use it, and that they can be too.</p>

<p>Some people use PGP signatures for that purpose, but inline signatures can be off-putting to people who don’t know what they are, and attachments can be similarly confusing. (Not to mention that, <a href="https://xkcd.com/1181/">as XKCD notes</a>, the security benefits are pretty slim.)</p>

<p>A one-line addition to an email signature is a good compromise. I propose the following:</p>

<blockquote>
  <p>I prefer to use encrypted email. My public key fingerprint is 4FF3 AA1B D29E 1638 32DE C765 9433 5F88 9A36 7709. Learn how to encrypt your email with <a href="https://emailselfdefense.fsf.org/en/">the Email Self Defense guide</a>.</p>
</blockquote>

<p>In my case, because I’ve got my key available on an HTTPS site, I’d probably <a href="https://www.eff.org/files/2013/11/03/parkerkey.txt">link to it directly</a> as well.</p>

<p>This system isn’t perfect, and in particular is not a very secure way to distribute your fingerprint. But it could be a good nudge to people who might be considering learning about email encryption while flagging you as somebody who might be able to help, and especially if you post to publicly archived mailing lists, it’s a way of getting your fingerprint tied to your emails in lots of places.</p>]]></content><author><name>Parker Higgins</name></author><category term="Uncategorized" /><category term="crypto" /><category term="encryption" /><category term="pgp" /><category term="privacy" /><category term="security" /><summary type="html"><![CDATA[A great way to encourage more ubiquitous email encryption is to let people you’re emailing know that you’re equipped to use it, and that they can be too.]]></summary></entry><entry><title type="html">HOWTO: Graph your GPG keyring</title><link href="https://thisisparker.github.io/dotnet/2014/02/howto-graph-your-gpg-keyring/" rel="alternate" type="text/html" title="HOWTO: Graph your GPG keyring" /><published>2014-02-06T01:44:46-05:00</published><updated>2014-02-06T01:44:46-05:00</updated><id>https://thisisparker.github.io/dotnet/2014/02/howto-graph-your-gpg-keyring</id><content type="html" xml:base="https://thisisparker.github.io/dotnet/2014/02/howto-graph-your-gpg-keyring/"><![CDATA[<p>We had a keysigning party at work today, and after it finished a few of us were looking for a way to visualize the newly increased signature density. It turns out the best tool for the job is called <a href="http://www.chaosreigns.com/code/sig2dot/">sig2dot</a>, which is available in the Debian repositories (and as a Perl script on its homepage).</p>

<p>Just make sure your keychain is refreshed with the most up-to-date keys (that’s just <code class="language-plaintext highlighter-rouge">gpg --refresh-keys</code>), and then run the script to create a file in <a href="https://en.wikipedia.org/wiki/DOT_language">the DOT language</a>. I had to download the script itself, so I ran:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ gpg --list-sigs | ./sig2dot.pl &gt; keyring.dot
</code></pre></div></div>

<p>Then, you can use one of a number of programs to render a visual file out of <code class="language-plaintext highlighter-rouge">keyring.dot</code>. If you have the package <code class="language-plaintext highlighter-rouge">graphviz</code> installed, you can use its <code class="language-plaintext highlighter-rouge">dot</code> command, or the <code class="language-plaintext highlighter-rouge">neato</code> command, which behave differently. Here are examples from my own key ring of the two programs in action:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ dot -Tpng keyring.dot &gt; keyring.dot.png
</code></pre></div></div>

<p><img src="https://parkerhiggins.net/wp-content/uploads/2014/02/gphkeyring.dot_.small_.png" alt="Keyring rendered by dot, small" /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ neato -Tpng keyring.dot &gt; keyring.neato.png
</code></pre></div></div>

<p><img src="https://parkerhiggins.net/wp-content/uploads/2014/02/gphkeyring.neato_.small_.png" alt="Keyring rendered by neato, small" /></p>

<p>In both cases, I’ve reduced the size of the graph a lot intentionally so the names are unreadable, but I’m looking at them locally at full size. In each case I’m the bright pink node in the middle. In the second graph, the keysigning party is clear as the dense patch in the top.</p>]]></content><author><name>Parker Higgins</name></author><category term="Uncategorized" /><category term="crypto" /><category term="encryption" /><category term="howto" /><summary type="html"><![CDATA[We had a keysigning party at work today, and after it finished a few of us were looking for a way to visualize the newly increased signature density. It turns out the best tool for the job is called sig2dot, which is available in the Debian repositories (and as a Perl script on its homepage).]]></summary></entry><entry><title type="html">Stanford Cryptography and #CryptoParty</title><link href="https://thisisparker.github.io/dotnet/2012/08/stanford-cryptography-and-cryptoparty/" rel="alternate" type="text/html" title="Stanford Cryptography and #CryptoParty" /><published>2012-08-24T01:30:00-04:00</published><updated>2012-08-24T01:30:00-04:00</updated><id>https://thisisparker.github.io/dotnet/2012/08/stanford-cryptography-and-cryptoparty</id><content type="html" xml:base="https://thisisparker.github.io/dotnet/2012/08/stanford-cryptography-and-cryptoparty/"><![CDATA[<p>I recently finished the free online <a href="https://class.coursera.org/crypto">Stanford cryptography course</a> offered through Coursera and taught by Dan Boneh. It’s a challenging class, with at least four hours of lectures a week, and it actually took me two attempts to get all the way through it. I’m really glad I did though: cryptography is a tremendously empowering subject, and learning the theoretical foundation can be not just educational but inspirational. In one early lecture, Boneh lays out a basic tenet that really spoke to me:</p>

<blockquote>
  <p>There’s a very central theorem in crypto, and it really is quite a surprising fact, that says that any computation you’d like to do, any function F you’d like to compute, that you can compute with a trusted authority, you can also do without a trusted authority. …</p>

  <p>Instead, what the parties are gonna do, is they’re gonna talk to one another using some protocol, such that at the end of the protocol all of the sudden the value of the function becomes known to everybody.</p>
</blockquote>

<p>Boneh is talking, in this example, about elections and private auctions, but the broader message is striking. Any function that’s possible with an authority is possible without one. Any group can devise a method for communicating internally and producing results without a requirement to put trust in a party on the outside.</p>

<p>This central theorem gave me new perspective on the connection between anarchy and cypherpunks. I knew that the government classified crypto technology as a munition during the “crypto wars” of the ’80s and ’90s, but I’d always assumed that the government feared its use to assist in acts of violence. I realize now how much more subversive it can be.</p>

<p>I had looked in the wrong place of Weber’s model of governmental authority as a <a href="https://en.wikipedia.org/wiki/Monopoly_on_violence">monopoly on the legitimate use of physical force</a>; while the government could claim to be concerned about crypto’s use in creating violence, it may have really been worried about its undermining the government’s monopoly on legitimacy. Any function that’s possible with an authority is possible without one.</p>

<p>The rest of the class was interesting as well, and the math involved feels clever but simple, complex but not complicated. I recommend it to anybody who’s given some thought to cryptography but wants to know more.</p>

<p>Of course, for some purposes a full class on cryptography is total overkill. It’s useful to gain a more complete understanding of the theoretical background, but for most it suffices simply to be literate. For everybody, but especially for people in high-risk situations — people who face threats from sophisticated, even state-level attackers — it’s important to know how to use the sophisticated tools that are available.</p>

<p>That, so far as I understand it, is the genesis of <a href="https://twitter.com/Asher_Wolf/status/238389782634459136">#CryptoParty</a>. It’s a set of global get-togethers where more experienced users can teach beginners how to use the commonly available tools that tap into the incredibly powerful technology of cryptography. I hope that a beginner walks away from a #CryptoParty with an understanding of not just PGP, OTR, and the like, but with an idea of why threat models are important, what attack vectors she ought to consider, and — most importantly — a network of people and resources she can contact for even more knowledge.</p>

<p>As far as I know, #CryptoParty is still less than 48 hours old, but it’s popping up with events all over the world. I’m planning to get together the SF chapter, if you can help with that, please drop me a line!</p>]]></content><author><name>Parker Higgins</name></author><category term="Uncategorized" /><category term="crypto" /><category term="cryptoparty" /><category term="dan boneh" /><category term="encryption" /><category term="stanford" /><summary type="html"><![CDATA[I recently finished the free online Stanford cryptography course offered through Coursera and taught by Dan Boneh. It’s a challenging class, with at least four hours of lectures a week, and it actually took me two attempts to get all the way through it. I’m really glad I did though: cryptography is a tremendously empowering subject, and learning the theoretical foundation can be not just educational but inspirational. In one early lecture, Boneh lays out a basic tenet that really spoke to me:]]></summary></entry><entry><title type="html">The crypto triple threat club</title><link href="https://thisisparker.github.io/dotnet/2012/06/the-crypto-triple-threat-club/" rel="alternate" type="text/html" title="The crypto triple threat club" /><published>2012-06-11T04:24:03-04:00</published><updated>2012-06-11T04:24:03-04:00</updated><id>https://thisisparker.github.io/dotnet/2012/06/the-crypto-triple-threat-club</id><content type="html" xml:base="https://thisisparker.github.io/dotnet/2012/06/the-crypto-triple-threat-club/"><![CDATA[<p>My written one-to-one communication patterns can be grouped into three major categories: longform, synchronous shortform, and asynchronous shortform. For the most part I use email, IMs, and SMS, respectively, for those purposes.</p>

<p>Each of those technologies has its own end-to-end encryption protocol. ((In some cases, more than one. I’m just listing the ones I use.)) Email has the venerable OpenPGP protocol and <a href="http://www.gnupg.org/">the GnuPG suite of programs</a>; IM has <a href="http://www.cypherpunks.ca/otr/">OTR for Off-the-Record Messaging</a> on Pidgin and Adium on the desktop, and<a href="https://guardianproject.info/apps/gibber/">Gibberbot</a> and <a href="https://chatsecure.org/">ChatSecure</a> on mobile; and SMS has <a href="https://github.com/whispersystems/textsecure">TextSecure</a>, a free software Android SMS application that does encryption locally and over the wire.</p>

<div class="wp-caption alignright" id="attachment_728" style="width: 293px">[![](https://parkerhiggins.net/wp-content/uploads/2012/06/textsecureqr.png "TextSecure QR code")](https://parkerhiggins.net/wp-content/uploads/2012/06/textsecureqr.png)My TextSecure fingreprint, as a QR code generated by the application.

</div>
<p>There’s a small but growing cadre of my friends with whom I’ve exchanged keys on all three protocols. ((Seriously, it’s growing. I added <a href="http://interi.org/">maiki</a> to the club just tonight.)) They’re the crypto triple threats. I want to build that list out further: if I’m having an end-to-end conversation with you, I’d like it to be encrypted end-to-end.</p>

<p>Some of these keys are harder than others to exchange. Email encryption is notoriously difficult to get right, while OTR is much simpler to start working with. TextSecure is a great example of the <a href="https://parkerhiggins.net/2012/03/a-modest-defense-of-qr-codes/">rare good QR code use case</a>.</p>

<p>These are communication tools, so they’re especially affected by <a href="https://en.wikipedia.org/wiki/Metcalfe%27s_law">Metcalfe’s Law</a>. That makes it even more important to get people to join the triple threat club. It also means that for each of these protocols, there are lots of people who want to help you figure it out. I’m one of those people. Let’s talk!</p>]]></content><author><name>Parker Higgins</name></author><category term="Uncategorized" /><category term="cell phones" /><category term="communication" /><category term="encryption" /><category term="mobile" /><category term="qr codes" /><category term="technology" /><summary type="html"><![CDATA[My written one-to-one communication patterns can be grouped into three major categories: longform, synchronous shortform, and asynchronous shortform. For the most part I use email, IMs, and SMS, respectively, for those purposes.]]></summary></entry><entry><title type="html">A modest defense of QR codes</title><link href="https://thisisparker.github.io/dotnet/2012/03/a-modest-defense-of-qr-codes/" rel="alternate" type="text/html" title="A modest defense of QR codes" /><published>2012-03-19T04:32:59-04:00</published><updated>2012-03-19T04:32:59-04:00</updated><id>https://thisisparker.github.io/dotnet/2012/03/a-modest-defense-of-qr-codes</id><content type="html" xml:base="https://thisisparker.github.io/dotnet/2012/03/a-modest-defense-of-qr-codes/"><![CDATA[<p>I’m sort of a QR code anti-hipster: I was into them <a href="http://ramisayar.com/enough-with-the-qr-codes/">before they were uncool</a>. I actually think they’re a really nifty encoding that’s easy to read and write with the right tools, and useful for a handful of situations. But they’re <a href="http://wtfqrcodes.com/">so widely misused</a> in marketing that most people never get to see one used properly.</p>

<p>But there is a way to use them properly! It’s just not the way marketers have been doing it. When is a QR code the right tool for the job? Well, it’s helpful to think about the limitations of the codes in the first place, instead of just wedging it in to every ad and package design.</p>

<h4 id="the-limitations">The limitations</h4>

<ul>
  <li><strong>They look like <a href="http://robotbarf.com/">robot barf</a>.</strong> It’s true. So don’t count on it being a positive addition to packaging or ad design. If it’s useful that’s great, but it’s not a design element.</li>
  <li><strong>They’re almost impossible to memorize.</strong> It seems to me like a pretty bad idea to put a company or personal URL in a form that human beings can’t read. If people are already taking out their phones to scan, it’s a missed opportunity for them to write out the domain.</li>
  <li><strong>They are only scannable in limited circumstances.</strong> Like when people have a scanner app installed, data signal, are stationary relative to the code, and have time to take out and futz with their phone.</li>
  <li><strong>Almost nobody uses them.</strong> Even I know this.</li>
</ul>

<h4 id="other-properties">Other properties</h4>

<ul>
  <li><strong>They use robust error correction.</strong> So there won’t be any typos or misread messages.</li>
  <li><strong>They add an extra requirement to decoding text.</strong> For marketing purposes, this is terrible. But in some circumstances, it can be useful to know that the decoder can choose not to read the message.</li>
  <li><strong>They’re easy to generate and scan.</strong> It doesn’t require much processing to encode or decode QR, and they can be made and read locally, without server access.</li>
  <li><strong>It’s easy to scan a lot of codes in a row.</strong> Scanning the first code involves taking the phone out of your pocket, selecting the app, and focusing the camera. But from there, the marginal cost is very low on additional codes.</li>
</ul>

<p>Now, if the people using these codes thought about these qualities and picked them only when appropriate, there’d be no problem and no backlash. But alas. When might these be a good tool?</p>

<h4 id="nice-uses">Nice uses</h4>

<ul>
  <li><strong>Cryptographic fingerprint checking.</strong> I use a great open source Android app called <a href="https://play.google.com/store/apps/details?id=org.thoughtcrime.securesms">TextSecure</a>, which allows you to exchange encrypted SMS with other users. But because it’s public key encryption, you have to verify the other person’s fingerprint. Fortunately, you can each just generate and scan QR codes to do so: in this case the alternative isn’t typing in a URL, but manually verifying 64 or so characters.</li>
  <li><strong>Sending links directly to your phone.</strong> <a href="https://code.google.com/p/chrometophone/">Chrome to Phone</a> has provided a nice alternative to this usage, but it doesn’t always do the job. Sometimes a QR code is the best way to get a URL, usually a long one, right over to the phone.</li>
  <li><strong>Selecting some items from a list of many.</strong> In South Korea, Tesco allows shoppers to <a href="http://www.geek.com/articles/mobile/koreas-tesco-reinvents-grocery-shopping-with-qr-code-stores-20110628/">scan codes on items in a subway ad in order to purchase them</a>. Here the low marginal cost of code scanning comes in handy. Once the phone’s out, it makes sense to quickly scan each of them.</li>
  <li><strong>When “voluntary security” is an element.</strong> Weakly protecting secrets like the answers to quiz questions or hints/spoilers for a game calls for encoding that is easy to decode when wanted, and difficult until then. As long as the user isn’t accessing the content from her smartphone itself, a QR code could useful.</li>
  <li><strong>Accessing data which requires many dynamic URL parameters.</strong> Because it’s easy to generate QR codes for any length of URL, it could be really nifty to generate them on the spot for URLs that wouldn’t be easy to type in but that wouldn’t make sense to shorten in advance, as with URLs with many parameters. That could happen if, say, a person has selected and scanned a bunch of objects and she wants to see them in a virtual cart, or has filled out a form at an offline kiosk and needs to send the data up through their phone.</li>
</ul>

<p>The point is, as maligned as QR codes have been recently, there are some jobs for which they’re just right. But as Jaron Lanier is quoted on the back of <a href="http://www.amazon.com/The-Information-Diet-Conscious-Consumption/dp/1449304680/">The Information Diet</a>, “There is no such thing as a tool that is good even if used without conscious consideration.” The marketing guys have spoken, and they’re not ready to provide a counter-example.</p>]]></content><author><name>Parker Higgins</name></author><category term="Uncategorized" /><category term="encryption" /><category term="qr codes" /><summary type="html"><![CDATA[I’m sort of a QR code anti-hipster: I was into them before they were uncool. I actually think they’re a really nifty encoding that’s easy to read and write with the right tools, and useful for a handful of situations. But they’re so widely misused in marketing that most people never get to see one used properly.]]></summary></entry><entry><title type="html">HOWTO: Transfer OTR private keys between Adium and Pidgin</title><link href="https://thisisparker.github.io/dotnet/2012/01/howto-transfer-otr-private-keys-between-adium-and-pidgin/" rel="alternate" type="text/html" title="HOWTO: Transfer OTR private keys between Adium and Pidgin" /><published>2012-01-30T04:44:24-05:00</published><updated>2012-01-30T04:44:24-05:00</updated><id>https://thisisparker.github.io/dotnet/2012/01/howto-transfer-otr-private-keys-between-adium-and-pidgin</id><content type="html" xml:base="https://thisisparker.github.io/dotnet/2012/01/howto-transfer-otr-private-keys-between-adium-and-pidgin/"><![CDATA[<p>I recently re-installed Ubuntu on my home computer, and wanted to move my office Mac’s Adium OTR key and collected fingerprints over to the new install. I had some trouble, but got it eventually, so I wanted to document the process.</p>

<p>The first step is to make sure you’ve got Pidgin and Pidgin-OTR installed on one computer, and Adium on another.</p>

<p>Adium stores the OTR private key and the fingerprints in</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>~/Library/Application Support/Adium 2.0/Users/Default/otr.private_key
~/Library/Application Support/Adium 2.0/Users/Default/otr.fingerprints

</code></pre></div></div>

<p>Pidgin, on GNU/Linux, stores the OTR private key and fingerprints in</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>~/.purple/otr.private_key
~/.purple/otr.fingerprints

</code></pre></div></div>

<p>It’s worth noting that neither application stores these keys encrypted. The threat model assumes that if an attacker has access to your <code class="language-plaintext highlighter-rouge">Adium 2.0</code> or <code class="language-plaintext highlighter-rouge">.purple</code> folder, you’re already compromised. But that means you have to be extra careful about transferring these files from one computer to another: obviously, sending your key in a cleartext e-mail is not a good idea.</p>

<p>Anyway, harmonizing is just a matter of copying both files from one location to another, and then modifying the key slightly to match the format that each program stores it in. I was disappointed at how poorly documented these formats are, but fortunately the always impressive <a href="https://guardianproject.info/">Guardian Project</a> has gone through and documented each program’s file location and format in order to build <a href="https://github.com/guardianproject/otrfileconverter">a tool to convert files between different IM client formats</a>. The tool’s not done, and so far only converts to their <a href="https://guardianproject.info/apps/gibber/">Gibberbot mobile IM client</a>, but the <a href="https://github.com/guardianproject/otrfileconverter/blob/master/README.txt">README</a> contains all the information you need.</p>

<p>In the case of Adium to Pidgin key transfer, which both use the standard <code class="language-plaintext highlighter-rouge">libotrname</code> field, which is an integer in the Adium config file, needs to be changed to the actual account name. The <code class="language-plaintext highlighter-rouge">protocol</code> field needs to be changed from <code class="language-plaintext highlighter-rouge">libpurple-jabber-gtalk</code> (in the case of a GTalk account) to <code class="language-plaintext highlighter-rouge">prpl-jabber</code>.</p>

<p>You may need to turn Pidgin’s OTR plugin off and on again, but it should recognize your key, and all of your verified fingerprints should show up as well.</p>]]></content><author><name>Parker Higgins</name></author><category term="Uncategorized" /><category term="adium" /><category term="encryption" /><category term="howto" /><category term="otr" /><category term="pidgin" /><category term="privacy" /><category term="ubuntu" /><summary type="html"><![CDATA[I recently re-installed Ubuntu on my home computer, and wanted to move my office Mac’s Adium OTR key and collected fingerprints over to the new install. I had some trouble, but got it eventually, so I wanted to document the process.]]></summary></entry></feed>