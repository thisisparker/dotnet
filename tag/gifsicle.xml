<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="https://thisisparker.github.io/dotnet/tag/gifsicle.xml" rel="self" type="application/atom+xml" /><link href="https://thisisparker.github.io/dotnet/" rel="alternate" type="text/html" /><updated>2022-09-18T17:52:36-04:00</updated><id>https://thisisparker.github.io/dotnet/tag/gifsicle.xml</id><title type="html">parker higgins dot net</title><subtitle></subtitle><author><name>Parker Higgins</name></author><entry><title type="html">HOWTO: Create an animated gif from a video with command line tools</title><link href="https://thisisparker.github.io/dotnet/2012/10/howto-create-an-animated-gif-from-a-video-with-command-line-tools/" rel="alternate" type="text/html" title="HOWTO: Create an animated gif from a video with command line tools" /><published>2012-10-22T06:29:13-04:00</published><updated>2012-10-22T06:29:13-04:00</updated><id>https://thisisparker.github.io/dotnet/2012/10/howto-create-an-animated-gif-from-a-video-with-command-line-tools</id><content type="html" xml:base="https://thisisparker.github.io/dotnet/2012/10/howto-create-an-animated-gif-from-a-video-with-command-line-tools/"><![CDATA[<p>Sometimes I see a few seconds of a video I’m watching and I think that it’d make a great animated gif. But because I don’t always have access to a bunch of graphics software, and because I might be using my Ubuntu or OS X box, it’s nice to have a process that works with widely- and freely-available free software command line tools. So I’ve worked out a process that uses the command line and requires only the programs <code class="language-plaintext highlighter-rouge">mplayer</code>, <code class="language-plaintext highlighter-rouge">imagemagick</code>, and <code class="language-plaintext highlighter-rouge">gifsicle</code>. Here’s how it goes:</p>

<ol>
  <li>
    <p>Make sure you have the programs installed. On Ubuntu (or most anything Debian-based with large enough repositories — these are common programs) it should just be a matter of</p>

    <blockquote>
      <p><code class="language-plaintext highlighter-rouge">sudo apt-get install mplayer imagemagick gifsicle</code></p>
    </blockquote>

    <p>On Mac OS X, first install the <a href="http://mxcl.github.com/homebrew/">Homebrew package manager</a>, and then install these programs with</p>

    <blockquote>
      <p><code class="language-plaintext highlighter-rouge">brew install mplayer imagemagick gifsicle</code></p>
    </blockquote>
  </li>
  <li>
    <p>Isolate the segment of video you want to clip out. You’re just looking for a timestamp, so you can do this in any video player. Once you’ve got a rough clip selected, use <code class="language-plaintext highlighter-rouge">mplayer</code> to export that to image files. You can use the following line to do that (there are some example values in there that I’ll explain afterward):</p>

    <blockquote>
      <p><code class="language-plaintext highlighter-rouge">mplayer -ao null -ss 0:02:06 -endpos 5 -vo gif89a:outdir=gif videofile.mp4</code></p>
    </blockquote>

    <p>Here’s what each flag means.</p>

    <ul>
      <li><code class="language-plaintext highlighter-rouge">-ao</code> means audio output. It’s set to null, because there’s no sound.</li>
      <li><code class="language-plaintext highlighter-rouge">-ss</code> is the start position. What follows is the H:MM:SS timestamp of the beginning of the clip you want.</li>
      <li><code class="language-plaintext highlighter-rouge">-endpos</code> is the end position of the clip, in seconds. So here I’ve taken out a 5 second clip.</li>
      <li>
        <p><code class="language-plaintext highlighter-rouge">-vo</code> is the video output. The next bit says to output gifs (that’s <code class="language-plaintext highlighter-rouge">gif89a</code> into the directory called “gif”. You can put them into whatever directory you want of course.</p>

        <p>For some reason the I don’t have the gif89a video output driver installed on my OS X computer, so I instead use <code class="language-plaintext highlighter-rouge">png</code> or <code class="language-plaintext highlighter-rouge">jpeg</code> in the place of <code class="language-plaintext highlighter-rouge">gif89a</code> up there. Your mileage may vary.</p>
      </li>
    </ul>
  </li>
  <li>
    <p>You now should have a directory full of stills. In case you used any other format to output them, I use one line of imagemagick’s <code class="language-plaintext highlighter-rouge">mogrify</code> to convert them:</p>

    <blockquote>
      <p><code class="language-plaintext highlighter-rouge">mogrify -format gif *.png</code></p>
    </blockquote>
  </li>
  <li>Then go through and remove the images at the start and the end that you don’t want in the final gif. Sometimes I cheat on the command line here, and just look at all the pictures with Preview or Image Viewer and delete the ones I don’t need.</li>
  <li>
    <p>Finally, use <code class="language-plaintext highlighter-rouge">gifsicle</code> to wrap it all up into an animated gif. I usually start with the line</p>

    <blockquote>
      <p><code class="language-plaintext highlighter-rouge">gifsicle --colors=256 --delay=4 --loopcount=0 --dither -O3 *.gif &gt; animation.gif</code></p>
    </blockquote>

    <p>and then tweak the parameters from there. Different source material calls for different settings, and I try to keep the final output as small as possible.</p>
  </li>
</ol>

<p>If you make a lot of gifs and like to mess with a lot of values, it might make sense for you to do it graphically. But this flow works pretty well for me.</p>]]></content><author><name>Parker Higgins</name></author><category term="Uncategorized" /><category term="anigif" /><category term="command line" /><category term="gifsicle" /><category term="howto" /><category term="mplayer" /><summary type="html"><![CDATA[Sometimes I see a few seconds of a video I’m watching and I think that it’d make a great animated gif. But because I don’t always have access to a bunch of graphics software, and because I might be using my Ubuntu or OS X box, it’s nice to have a process that works with widely- and freely-available free software command line tools. So I’ve worked out a process that uses the command line and requires only the programs mplayer, imagemagick, and gifsicle. Here’s how it goes:]]></summary></entry></feed>